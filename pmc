{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1758daf0-e459-41a7-9276-24097da1eba1",
   "metadata": {},
   "source": [
    "# **DOI to PMCID**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "652c21e7-fc81-45b3-b50d-a01581f2a2c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['10.1038/s41598-023-47358-4' '10.3389/fonc.2023.1215194'\n",
      " '10.2478/amns.2023.1.00446' ... '10.1074/jbc.m303257200'\n",
      " '10.1128/jvi.76.9.4162-4171.2002' '10.1073/pnas.96.24.14147']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DOI</th>\n",
       "      <th>PMID</th>\n",
       "      <th>PMCID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10.1038/s41598-023-47358-4</td>\n",
       "      <td>37989862</td>\n",
       "      <td>PMC10663565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.3389/fonc.2023.1215194</td>\n",
       "      <td>37854681</td>\n",
       "      <td>PMC10580988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10.1007/s12094-023-03189-3</td>\n",
       "      <td>37067729</td>\n",
       "      <td>PMC10250522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10.3390/cells12050810</td>\n",
       "      <td>36899946</td>\n",
       "      <td>PMC10000689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10.3390/genes14010013</td>\n",
       "      <td>36672755</td>\n",
       "      <td>PMC9858589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4974</th>\n",
       "      <td>10.1194/jlr.m500540-jlr200</td>\n",
       "      <td>Not Found</td>\n",
       "      <td>Not Found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4975</th>\n",
       "      <td>10.1093/carcin/bgn010</td>\n",
       "      <td>Not Found</td>\n",
       "      <td>Not Found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4976</th>\n",
       "      <td>10.1074/jbc.m503188200</td>\n",
       "      <td>Not Found</td>\n",
       "      <td>Not Found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4977</th>\n",
       "      <td>10.1016/j.molcel.2009.10.026</td>\n",
       "      <td>Not Found</td>\n",
       "      <td>Not Found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4978</th>\n",
       "      <td>10.1016/j.cell.2009.12.023</td>\n",
       "      <td>Not Found</td>\n",
       "      <td>Not Found</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4979 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                               DOI       PMID        PMCID\n",
       "0       10.1038/s41598-023-47358-4   37989862  PMC10663565\n",
       "1        10.3389/fonc.2023.1215194   37854681  PMC10580988\n",
       "2       10.1007/s12094-023-03189-3   37067729  PMC10250522\n",
       "3            10.3390/cells12050810   36899946  PMC10000689\n",
       "4            10.3390/genes14010013   36672755   PMC9858589\n",
       "...                            ...        ...          ...\n",
       "4974    10.1194/jlr.m500540-jlr200  Not Found    Not Found\n",
       "4975         10.1093/carcin/bgn010  Not Found    Not Found\n",
       "4976        10.1074/jbc.m503188200  Not Found    Not Found\n",
       "4977  10.1016/j.molcel.2009.10.026  Not Found    Not Found\n",
       "4978    10.1016/j.cell.2009.12.023  Not Found    Not Found\n",
       "\n",
       "[4979 rows x 3 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Completed in 3.11 seconds.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DOI</th>\n",
       "      <th>PMID</th>\n",
       "      <th>PMCID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10.1038/s41598-023-47358-4</td>\n",
       "      <td>37989862</td>\n",
       "      <td>PMC10663565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.3389/fonc.2023.1215194</td>\n",
       "      <td>37854681</td>\n",
       "      <td>PMC10580988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10.1007/s12094-023-03189-3</td>\n",
       "      <td>37067729</td>\n",
       "      <td>PMC10250522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10.3390/cells12050810</td>\n",
       "      <td>36899946</td>\n",
       "      <td>PMC10000689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10.3390/genes14010013</td>\n",
       "      <td>36672755</td>\n",
       "      <td>PMC9858589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4974</th>\n",
       "      <td>10.1194/jlr.m500540-jlr200</td>\n",
       "      <td>Not Found</td>\n",
       "      <td>Not Found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4975</th>\n",
       "      <td>10.1093/carcin/bgn010</td>\n",
       "      <td>Not Found</td>\n",
       "      <td>Not Found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4976</th>\n",
       "      <td>10.1074/jbc.m503188200</td>\n",
       "      <td>Not Found</td>\n",
       "      <td>Not Found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4977</th>\n",
       "      <td>10.1016/j.molcel.2009.10.026</td>\n",
       "      <td>Not Found</td>\n",
       "      <td>Not Found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4978</th>\n",
       "      <td>10.1016/j.cell.2009.12.023</td>\n",
       "      <td>Not Found</td>\n",
       "      <td>Not Found</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4979 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                               DOI       PMID        PMCID\n",
       "0       10.1038/s41598-023-47358-4   37989862  PMC10663565\n",
       "1        10.3389/fonc.2023.1215194   37854681  PMC10580988\n",
       "2       10.1007/s12094-023-03189-3   37067729  PMC10250522\n",
       "3            10.3390/cells12050810   36899946  PMC10000689\n",
       "4            10.3390/genes14010013   36672755   PMC9858589\n",
       "...                            ...        ...          ...\n",
       "4974    10.1194/jlr.m500540-jlr200  Not Found    Not Found\n",
       "4975         10.1093/carcin/bgn010  Not Found    Not Found\n",
       "4976        10.1074/jbc.m503188200  Not Found    Not Found\n",
       "4977  10.1016/j.molcel.2009.10.026  Not Found    Not Found\n",
       "4978    10.1016/j.cell.2009.12.023  Not Found    Not Found\n",
       "\n",
       "[4979 rows x 3 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import time\n",
    "import requests\n",
    "import pandas as pd\n",
    "from concurrent.futures import ThreadPoolExecutor\n",
    "import logging\n",
    "# Recording execution time\n",
    "start = time.time()\n",
    "\n",
    "# PMC API\n",
    "\n",
    "BASE_URL = \"https://www.ncbi.nlm.nih.gov/pmc/utils/idconv/v1.0/\"\n",
    "\n",
    "# Load DOIs from CSV (non null and unique ones only)\n",
    "df = pd.read_csv('../data/metadata.csv', dtype=str)\n",
    "dois = df['DOI'].dropna().unique()\n",
    "\n",
    "MAX_RETRIES = 5\n",
    "BACKOFF_FACTOR = 2\n",
    "\n",
    "def fetch_ids_batch(doi_batch, attempt=1):\n",
    "    \"\"\"Fetch PMCIDS and PMIDS using a batch request with retries.\"\"\"\n",
    "    params = {\n",
    "        'format': 'json',\n",
    "        'ids': ','.join(doi_batch),\n",
    "        'api_key': API_KEY\n",
    "    }\n",
    "\n",
    "    try:\n",
    "        response = requests.get(BASE_URL, params=params, timeout=10)\n",
    "        if response.status_code == 200:\n",
    "            data = response.json()\n",
    "            return [(rec.get('doi', 'Not Found'), rec.get('pmid', 'Not Found'), rec.get('pmcid', 'Not Found'))\n",
    "                    for rec in data.get('records', [])]\n",
    "        elif response.status_code == 429:\n",
    "            wait_time = BACKOFF_FACTOR * attempt\n",
    "            logging.warning(f\"Rate limit exceeded! Retrying after {wait_time} seconds (attempt {attempt})...\")\n",
    "            time.sleep(wait_time)\n",
    "            if attempt < MAX_RETRIES:\n",
    "                return fetch_ids_batch(doi_batch, attempt + 1)\n",
    "        elif response.status_code in {500, 502, 503, 504}:\n",
    "            wait_time = BACKOFF_FACTOR * attempt\n",
    "            logging.warning(f\"Server error {response.status_code}! Retrying after {wait_time} seconds (attempt {attempt})...\")\n",
    "            time.sleep(wait_time)\n",
    "            if attempt < MAX_RETRIES:\n",
    "                return fetch_ids_batch(doi_batch, attempt + 1)\n",
    "        else:\n",
    "            logging.error(f\"Request failed with status {response.status_code}: {response.text}\")\n",
    "\n",
    "    except requests.RequestException as e:\n",
    "        logging.error(f\"Request exception: {e}\")\n",
    "        if attempt < MAX_RETRIES:\n",
    "            wait_time = BACKOFF_FACTOR * attempt\n",
    "            logging.warning(f\"Retrying after {wait_time} seconds (attempt {attempt})...\")\n",
    "            time.sleep(wait_time)\n",
    "            return fetch_ids_batch(doi_batch, attempt + 1)\n",
    "\n",
    "    # If all retries fail, return errors\n",
    "    return [(doi, 'Error', 'Error') for doi in doi_batch]\n",
    "\n",
    "\n",
    "def doi_to_pmcid(dois):\n",
    "    batch_size = 150  # Number of DOIs per request\n",
    "    nb_workers = 5  # Number of parallel requests\n",
    "    results = []\n",
    "\n",
    "    # Split DOIs into batches of 10\n",
    "    doi_batches = [dois[i:i + batch_size] for i in range(0, len(dois), batch_size)]\n",
    "\n",
    "    # Execute requests in parallel using ThreadPoolExecutor with 5 workers\n",
    "    with ThreadPoolExecutor(max_workers = nb_workers) as executor:\n",
    "        results_list = list(executor.map(fetch_ids_batch, doi_batches)) # This returns a list of lists (batches) of tuples\n",
    "\n",
    "    # Flatten results (since each batch returns a list)\n",
    "    results = [item for sublist in results_list for item in sublist] # This is a list of tuples after flattening the batches lists\n",
    "\n",
    "    # Convert results to DataFrame and save as CSV\n",
    "    result_df = pd.DataFrame(results, columns=['DOI', 'PMID', 'PMCID'])\n",
    "    display(result_df)\n",
    "    result_df.to_csv('doi_to_pmcids.tsv', index=False, sep='\\t')\n",
    "\n",
    "    # Record end time\n",
    "    end = time.time()\n",
    "\n",
    "    print(f\"Completed in {round(end-start, 2)} seconds.\")\n",
    "    return result_df\n",
    "print(dois)\n",
    "doi_to_pmcid(dois)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccf75d02-5e1d-4bed-858b-17fd54520f33",
   "metadata": {},
   "source": [
    "# **Verify if DOI is in PMC**\n",
    "\n",
    "---\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d1e0e200-0863-4a9d-b9bf-e3ebfc7fd353",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found: 3270, Not Found: 1709\n",
      "Execution time : 2.5919766426086426 s\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "import time\n",
    "from concurrent.futures import ThreadPoolExecutor\n",
    "import time\n",
    "\n",
    "# record start time\n",
    "start = time.time()\n",
    "# API details\n",
    "API_KEY = None  \n",
    "BASE_URL = \"https://www.ncbi.nlm.nih.gov/pmc/utils/idconv/v1.0/\"\n",
    "\n",
    "# Load DOIs from file\n",
    "dois = pd.read_csv(\"doi_to_pmcids.tsv\", sep=\"\\t\")[\"DOI\"].dropna().tolist()\n",
    "#dois = dois[:300]  # Limit to 300 DOIs for testing\n",
    "\n",
    "# Function to check if a batch of DOIs exists in PMC\n",
    "def check_doi_existence(doi_batch):\n",
    "    params = {\n",
    "        \"format\": \"json\",\n",
    "        \"ids\": \",\".join(doi_batch),  # Batch of DOIs\n",
    "        \"api_key\": API_KEY\n",
    "    }\n",
    "\n",
    "    for attempt in range(3):  # Retry up to 3 times\n",
    "        try:\n",
    "            response = requests.get(BASE_URL, params=params, timeout=20)\n",
    "            response.raise_for_status()\n",
    "            return extract_results(response.json(), doi_batch)\n",
    "        except requests.exceptions.Timeout:\n",
    "            print(f\"Timeout for batch {doi_batch}. Retrying ({attempt+1}/3)...\")\n",
    "            time.sleep(2 ** attempt)  # Exponential backoff (2s, 4s, 8s)\n",
    "        except requests.exceptions.RequestException as e:\n",
    "            print(f\"Request failed for batch {doi_batch}: {e}\")\n",
    "            return {doi: -1 for doi in doi_batch}  # Mark all as failed\n",
    "\n",
    "    return {doi: -1 for doi in doi_batch}  # Failure after all retries\n",
    "\n",
    "# Extract results from API response & map to DOIs\n",
    "def extract_results(api_response, doi_batch):\n",
    "    found_dois = {record[\"doi\"]: 1 for record in api_response.get(\"records\", []) if \"pmcid\" in record}\n",
    "\n",
    "    # Map input DOIs to found/not found status\n",
    "    return {doi: found_dois.get(doi, 0) for doi in doi_batch}\n",
    "\n",
    "# Process DOIs in parallel using 5 workers\n",
    "def process_dois(dois, batch_size=150, workers=5):\n",
    "    df_found = []\n",
    "    df_not_found = []\n",
    "\n",
    "    # Split DOIs into batches of `batch_size`\n",
    "    doi_batches = [dois[i:i + batch_size] for i in range(0, len(dois), batch_size)]\n",
    "\n",
    "    # Use ThreadPoolExecutor for parallel requests\n",
    "    with ThreadPoolExecutor(max_workers=workers) as executor:\n",
    "        results = list(executor.map(check_doi_existence, doi_batches))\n",
    "\n",
    "    # Flatten results & store in DataFrames\n",
    "    for batch_result in results:\n",
    "        for doi, count in batch_result.items():\n",
    "            if count > 0:\n",
    "                df_found.append({\"DOI\": doi, \"Found\": count})\n",
    "            else:\n",
    "                df_not_found.append({\"DOI\": doi, \"Found\": count})\n",
    "\n",
    "    # Convert to DataFrames & Save\n",
    "    pd.DataFrame(df_found).to_csv('found_dois.csv', index=False)\n",
    "    pd.DataFrame(df_not_found).to_csv('not_found_dois.csv', index=False)\n",
    "\n",
    "    print(f\"Found: {len(df_found)}, Not Found: {len(df_not_found)}\")\n",
    "    return df_found, df_not_found\n",
    "# Run the main function\n",
    "if __name__ == \"__main__\":\n",
    "    f, nf = process_dois(dois)\n",
    "\n",
    "end = time.time()\n",
    "\n",
    "print(\"Execution time :\",\n",
    "      (end-start) , \"s\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80680958-6ed2-4648-8087-7b743ff1c965",
   "metadata": {},
   "source": [
    "# **PMCID xml files download**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ff9fa01d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Batch download\n",
      "Execution time : 0.7086141109466553 s\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import shutil\n",
    "import pandas as pd\n",
    "import requests\n",
    "import time\n",
    "import concurrent.futures\n",
    "\n",
    "# record start time\n",
    "start = time.time()\n",
    "EXTRACT_PATH = \"xml\" \n",
    "#   Download XMLs in batch using NCBI API\n",
    "def download_pmc_xml(pmid):\n",
    "    url = f\"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pmc&id={pmid}&rettype=xml\"\n",
    "    response = requests.get(url, timeout=30)\n",
    "\n",
    "    #  Handle 200 (Success)\n",
    "    if response.status_code == 200:\n",
    "       \n",
    "        file_path = f\"{pmid}.xml\"\n",
    "        with open(file_path, \"wb\") as f:\n",
    "            f.write(response.content)  # Save response XML\n",
    "        print(f\" Batch download\")\n",
    "        return  # Exit function if successful\n",
    "\n",
    "    #  Handle Other Errors \n",
    "    print(f\" Failed ... (Status {response.status_code})\")\n",
    "\n",
    "download_pmc_xml(\"PMC10663565\")\n",
    "\n",
    "end = time.time()\n",
    "\n",
    "print(\"Execution time :\",\n",
    "      (end-start) , \"s\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "88f5c722",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DOI</th>\n",
       "      <th>PMID</th>\n",
       "      <th>PMCID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10.1038/s41467-024-47549-1</td>\n",
       "      <td>38622137</td>\n",
       "      <td>PMC11018805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.3390/molecules29174211</td>\n",
       "      <td>39275059</td>\n",
       "      <td>PMC11397538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10.1016/j.bioactmat.2023.10.025</td>\n",
       "      <td>38076646</td>\n",
       "      <td>PMC10701289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10.3390/molecules29051020</td>\n",
       "      <td>38474532</td>\n",
       "      <td>PMC10935257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10.1021/acsomega.3c07612</td>\n",
       "      <td>38497004</td>\n",
       "      <td>PMC10938319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10.3390/bios13030376</td>\n",
       "      <td>36979588</td>\n",
       "      <td>PMC10046318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10.1016/j.nantod.2022.101665</td>\n",
       "      <td>37034382</td>\n",
       "      <td>PMC10081506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>10.1021/acsomega.3c00873</td>\n",
       "      <td>37214711</td>\n",
       "      <td>PMC10193544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>10.1021/acsami.2c16199</td>\n",
       "      <td>36475576</td>\n",
       "      <td>PMC9782376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10.1007/s11426-022-1408-5</td>\n",
       "      <td>36536633</td>\n",
       "      <td>PMC9753096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10.1002/advs.202207621</td>\n",
       "      <td>36737845</td>\n",
       "      <td>PMC10131860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>10.1039/c9na00794f</td>\n",
       "      <td>36132507</td>\n",
       "      <td>PMC9419731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>10.1039/d2na00080f</td>\n",
       "      <td>36133414</td>\n",
       "      <td>PMC9418512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>10.1038/s41598-022-23055-6</td>\n",
       "      <td>36316402</td>\n",
       "      <td>PMC9622855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>10.1039/c7ra11383h</td>\n",
       "      <td>35541833</td>\n",
       "      <td>PMC9078579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>10.1039/c7ra13404e</td>\n",
       "      <td>35542809</td>\n",
       "      <td>PMC9079255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>10.1039/c8ra09298b</td>\n",
       "      <td>35558776</td>\n",
       "      <td>PMC9092139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>10.1039/d0ra06383e</td>\n",
       "      <td>35514886</td>\n",
       "      <td>PMC9058413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>10.1039/c8ra09729a</td>\n",
       "      <td>35520477</td>\n",
       "      <td>PMC9059868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>10.1039/c9ra05689k</td>\n",
       "      <td>35529211</td>\n",
       "      <td>PMC9070765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>10.1039/d2ra00039c</td>\n",
       "      <td>35424689</td>\n",
       "      <td>PMC8982287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>10.3389/fchem.2022.875241</td>\n",
       "      <td>35494640</td>\n",
       "      <td>PMC9043490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>10.1039/d0ra02276d</td>\n",
       "      <td>35497143</td>\n",
       "      <td>PMC9052113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>10.32607/actanaturae.11180</td>\n",
       "      <td>34377553</td>\n",
       "      <td>PMC8327149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>10.1016/j.bios.2021.113823</td>\n",
       "      <td>34838374</td>\n",
       "      <td>PMC8606172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>10.3390/nano12060898</td>\n",
       "      <td>35335711</td>\n",
       "      <td>PMC8951121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>10.3390/ma14061504</td>\n",
       "      <td>33803897</td>\n",
       "      <td>PMC8003300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>10.3390/nano11051265</td>\n",
       "      <td>34065804</td>\n",
       "      <td>PMC8151150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>10.3390/nano11051232</td>\n",
       "      <td>34067118</td>\n",
       "      <td>PMC8150300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>10.1016/j.isci.2020.101344</td>\n",
       "      <td>32688287</td>\n",
       "      <td>PMC7369617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>10.3389/fchem.2020.580033</td>\n",
       "      <td>33244465</td>\n",
       "      <td>PMC7683785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>10.3390/molecules25235731</td>\n",
       "      <td>33291853</td>\n",
       "      <td>PMC7730470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>10.1039/c9na00168a</td>\n",
       "      <td>32195453</td>\n",
       "      <td>PMC7081933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>10.1371/journal.pone.0230646</td>\n",
       "      <td>32208468</td>\n",
       "      <td>PMC7092965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>10.1002/advs.201903525</td>\n",
       "      <td>32328432</td>\n",
       "      <td>PMC7175254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>10.1021/acsomega.8b01159</td>\n",
       "      <td>31459247</td>\n",
       "      <td>PMC6645128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>10.3390/nano9101500</td>\n",
       "      <td>31652527</td>\n",
       "      <td>PMC6835739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>10.1186/s11671-019-3088-6</td>\n",
       "      <td>31410663</td>\n",
       "      <td>PMC6692426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>10.1021/acsomega.7b01014</td>\n",
       "      <td>31457796</td>\n",
       "      <td>PMC6641901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>10.1021/acsomega.8b00047</td>\n",
       "      <td>31458732</td>\n",
       "      <td>PMC6641713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>10.1021/jacs.9b02369</td>\n",
       "      <td>31038938</td>\n",
       "      <td>PMC7733706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>10.1021/acs.est.9b01453</td>\n",
       "      <td>31199142</td>\n",
       "      <td>PMC7388031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>10.1007/s40820-015-0077-x</td>\n",
       "      <td>30460280</td>\n",
       "      <td>PMC6223677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>10.3390/nano8121071</td>\n",
       "      <td>30572668</td>\n",
       "      <td>PMC6315650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>10.1038/s41598-017-18338-2</td>\n",
       "      <td>29269774</td>\n",
       "      <td>PMC5740083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>10.1186/s11671-018-2440-6</td>\n",
       "      <td>29349585</td>\n",
       "      <td>PMC5773460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>10.1186/s11671-017-2137-2</td>\n",
       "      <td>28605883</td>\n",
       "      <td>PMC5466853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>10.1039/c5sc00819k</td>\n",
       "      <td>28717465</td>\n",
       "      <td>PMC5497271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>10.1038/s41598-017-06356-z</td>\n",
       "      <td>28724997</td>\n",
       "      <td>PMC5517519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>10.1038/srep36794</td>\n",
       "      <td>27830733</td>\n",
       "      <td>PMC5103289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>10.1021/acsami.6b13954</td>\n",
       "      <td>28134510</td>\n",
       "      <td>PMC5491707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>10.1002/adfm.201500624</td>\n",
       "      <td>28458628</td>\n",
       "      <td>PMC5409516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>10.1016/j.addr.2016.05.023</td>\n",
       "      <td>27266447</td>\n",
       "      <td>PMC5136524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>10.1038/srep35565</td>\n",
       "      <td>27752120</td>\n",
       "      <td>PMC5067703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>10.1016/j.nantod.2016.05.010</td>\n",
       "      <td>27818705</td>\n",
       "      <td>PMC5089816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>10.1038/srep02933</td>\n",
       "      <td>24121717</td>\n",
       "      <td>PMC3796302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>10.1038/srep03564</td>\n",
       "      <td>24389590</td>\n",
       "      <td>PMC3880965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>10.1186/1556-276X-9-583</td>\n",
       "      <td>25346649</td>\n",
       "      <td>PMC4207633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>10.1038/srep01473</td>\n",
       "      <td>23502324</td>\n",
       "      <td>PMC3600594</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                DOI      PMID        PMCID\n",
       "0        10.1038/s41467-024-47549-1  38622137  PMC11018805\n",
       "1         10.3390/molecules29174211  39275059  PMC11397538\n",
       "2   10.1016/j.bioactmat.2023.10.025  38076646  PMC10701289\n",
       "3         10.3390/molecules29051020  38474532  PMC10935257\n",
       "4          10.1021/acsomega.3c07612  38497004  PMC10938319\n",
       "5              10.3390/bios13030376  36979588  PMC10046318\n",
       "6      10.1016/j.nantod.2022.101665  37034382  PMC10081506\n",
       "7          10.1021/acsomega.3c00873  37214711  PMC10193544\n",
       "8            10.1021/acsami.2c16199  36475576   PMC9782376\n",
       "9         10.1007/s11426-022-1408-5  36536633   PMC9753096\n",
       "10           10.1002/advs.202207621  36737845  PMC10131860\n",
       "11               10.1039/c9na00794f  36132507   PMC9419731\n",
       "12               10.1039/d2na00080f  36133414   PMC9418512\n",
       "13       10.1038/s41598-022-23055-6  36316402   PMC9622855\n",
       "14               10.1039/c7ra11383h  35541833   PMC9078579\n",
       "15               10.1039/c7ra13404e  35542809   PMC9079255\n",
       "16               10.1039/c8ra09298b  35558776   PMC9092139\n",
       "17               10.1039/d0ra06383e  35514886   PMC9058413\n",
       "18               10.1039/c8ra09729a  35520477   PMC9059868\n",
       "19               10.1039/c9ra05689k  35529211   PMC9070765\n",
       "20               10.1039/d2ra00039c  35424689   PMC8982287\n",
       "21        10.3389/fchem.2022.875241  35494640   PMC9043490\n",
       "22               10.1039/d0ra02276d  35497143   PMC9052113\n",
       "23       10.32607/actanaturae.11180  34377553   PMC8327149\n",
       "24       10.1016/j.bios.2021.113823  34838374   PMC8606172\n",
       "25             10.3390/nano12060898  35335711   PMC8951121\n",
       "26               10.3390/ma14061504  33803897   PMC8003300\n",
       "27             10.3390/nano11051265  34065804   PMC8151150\n",
       "28             10.3390/nano11051232  34067118   PMC8150300\n",
       "29       10.1016/j.isci.2020.101344  32688287   PMC7369617\n",
       "30        10.3389/fchem.2020.580033  33244465   PMC7683785\n",
       "31        10.3390/molecules25235731  33291853   PMC7730470\n",
       "32               10.1039/c9na00168a  32195453   PMC7081933\n",
       "33     10.1371/journal.pone.0230646  32208468   PMC7092965\n",
       "34           10.1002/advs.201903525  32328432   PMC7175254\n",
       "35         10.1021/acsomega.8b01159  31459247   PMC6645128\n",
       "36              10.3390/nano9101500  31652527   PMC6835739\n",
       "37        10.1186/s11671-019-3088-6  31410663   PMC6692426\n",
       "38         10.1021/acsomega.7b01014  31457796   PMC6641901\n",
       "39         10.1021/acsomega.8b00047  31458732   PMC6641713\n",
       "40             10.1021/jacs.9b02369  31038938   PMC7733706\n",
       "41          10.1021/acs.est.9b01453  31199142   PMC7388031\n",
       "42        10.1007/s40820-015-0077-x  30460280   PMC6223677\n",
       "43              10.3390/nano8121071  30572668   PMC6315650\n",
       "44       10.1038/s41598-017-18338-2  29269774   PMC5740083\n",
       "45        10.1186/s11671-018-2440-6  29349585   PMC5773460\n",
       "46        10.1186/s11671-017-2137-2  28605883   PMC5466853\n",
       "47               10.1039/c5sc00819k  28717465   PMC5497271\n",
       "48       10.1038/s41598-017-06356-z  28724997   PMC5517519\n",
       "49                10.1038/srep36794  27830733   PMC5103289\n",
       "50           10.1021/acsami.6b13954  28134510   PMC5491707\n",
       "51           10.1002/adfm.201500624  28458628   PMC5409516\n",
       "52       10.1016/j.addr.2016.05.023  27266447   PMC5136524\n",
       "53                10.1038/srep35565  27752120   PMC5067703\n",
       "54     10.1016/j.nantod.2016.05.010  27818705   PMC5089816\n",
       "55                10.1038/srep02933  24121717   PMC3796302\n",
       "56                10.1038/srep03564  24389590   PMC3880965\n",
       "57          10.1186/1556-276X-9-583  25346649   PMC4207633\n",
       "58                10.1038/srep01473  23502324   PMC3600594"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Completed in 18.92 seconds.\n"
     ]
    }
   ],
   "source": [
    "my_df = pd.read_csv('../Citing/citing_dois.tsv', sep='\\t', dtype=str)\n",
    "dois = my_df[my_df['DOI'] != 'No full text available']['DOI'].dropna().unique()\n",
    "\n",
    "#print(dois)\n",
    "pmc = doi_to_pmcid(dois)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e84a084",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "import os\n",
    "import lxml.etree as ET\n",
    "\n",
    "# record start time\n",
    "start = time.time()\n",
    "API_KEY =  \"fd895b77ece1cd582d9d2a40cc6d23f88008\"  # NCBI API key\n",
    "TSV_FILE = \"doi_to_pmcids.tsv\"  #   Path to your TSV file\n",
    "EXTRACT_PATH = \"xml\"  #   Folder to save XML files\n",
    "BATCH_SIZE = 5  #   Max PMCIDs per batch\n",
    "MAX_WORKERS = 1  #   Number of parallel batch requests\n",
    "\n",
    "\n",
    "# Check if directory exists Ensure XML directory exists\n",
    "if os.path.exists(EXTRACT_PATH):  \n",
    "    shutil.rmtree(EXTRACT_PATH)\n",
    "os.makedirs(EXTRACT_PATH, exist_ok=True)\n",
    "\n",
    "#   Load PMCIDs from TSV file\n",
    "def load_pmc_ids(tsv_file):\n",
    "    df = pd.read_csv(tsv_file, sep=\"\\t\")\n",
    "    df = df.loc[df['PMCID'] != 'Not Found']  # useless to look for the non existing pmcids\n",
    "    return df[\"PMCID\"].astype(str).tolist()  # Ensure PMCIDs are strings\n",
    "\n",
    "def load_pmc_ids(tsv_file):\n",
    "    \"\"\"Load valid PMCIDs from a TSV file.\"\"\"\n",
    "    df = pd.read_csv(tsv_file, sep=\"\\t\")\n",
    "    df = df[df['PMCID'] != 'Not Found']  \n",
    "    return df[\"PMCID\"].astype(str).tolist()\n",
    "\n",
    "def fetch_pubmed_articles(pmc_ids, batch_size=200):\n",
    "    \"\"\"Fetch articles in batches from PMC using E-utilities.\"\"\"\n",
    "    epost_url = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/epost.fcgi\"\n",
    "    efetch_url = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi\"\n",
    "    \n",
    "    for i in range(0, len(pmc_ids), batch_size):\n",
    "        batch = pmc_ids[i:i + batch_size]\n",
    "        print(f\"Processing batch {i//batch_size + 1} with {len(batch)} IDs...\")\n",
    "        \n",
    "        # Post IDs to Entrez\n",
    "        epost_params = {\"db\": \"pmc\", \"id\": \",\".join(batch),\"api_key\": API_KEY}\n",
    "        epost_response = requests.post(epost_url, data=epost_params, timeout=10)\n",
    "        epost_response.raise_for_status()\n",
    "        \n",
    "        # Parse WebEnv and QueryKey\n",
    "        root = ET.fromstring(epost_response.content)\n",
    "        webenv = root.find(\".//WebEnv\").text\n",
    "        query_key = root.find(\".//QueryKey\").text\n",
    "        print(\"Received WebEnv and QueryKey.\")\n",
    "\n",
    "        # Fetch articles\n",
    "        efetch_params = {\n",
    "            \"db\": \"pmc\",\n",
    "            \"query_key\": query_key,\n",
    "            \"WebEnv\": webenv,\n",
    "            \"retmode\": \"xml\",\n",
    "            \"rettype\": \"full\",\n",
    "            \"api_key\": API_KEY\n",
    "        }\n",
    "        efetch_response = requests.get(efetch_url, params=efetch_params, timeout=30)\n",
    "        efetch_response.raise_for_status()\n",
    "        \n",
    "        # Parse and save articles\n",
    "        root = ET.fromstring(efetch_response.content)\n",
    "        for article in root.xpath(\".//article\"):\n",
    "            pmid = article.find(\".//article-meta/article-id[@pub-id-type='pmc']\")\n",
    "            pmid_text = pmid.text if pmid is not None else \"unknown\"\n",
    "\n",
    "            file_path = os.path.join(EXTRACT_PATH, f\"{pmid_text}.xml\")\n",
    "            with open(file_path, \"wb\") as f:\n",
    "                f.write(ET.tostring(article, encoding=\"utf-8\", pretty_print=True))\n",
    "            print(f\"Downloaded: {pmid_text}.xml\")\n",
    "\n",
    "pmc_ids = pmc['PMID'].dropna()\n",
    "print(len(pmc_ids))\n",
    "#pmc_ids = load_pmc_ids(TSV_FILE)\n",
    "fetch_pubmed_articles(pmc_ids)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
